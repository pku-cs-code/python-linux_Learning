python之协程

又称微线程，纤程，coroutine
用户台的轻量级线程，操作系统不知道它的存在
有它自己的寄存器上下文和栈

yield

能保留上一次调用时的状态（即所有局部状态的一个特定组合），每次过程重入时，就相当于进入上一次调用的状态，换种说法，进入上一次离开时所处逻辑流逇位置

两个函数是在一个线程里

能够并发，其实是串行的，是因为切换速度快
跟多个线程在一个cpu上并发一样

os控制不了线程的切换，是cpu自己控制的，os只负责把线程交给cpu
比cpu线程之间的效率还要高，因为协程是单线程，不会在线程之间切换
cpu线程切换时需要获取上下文存到寄存器里

协程是串行的，同一时间只能执行一个，故不需加锁


无需上下文切换的开销
无需原子操作锁定及同步的开销
方便切换控制流，简化编程模型
高并发+高拓展性+低成本：一个cpu支持上万的协程都不是问题，适用于高并发

缺点：无法利用多核资源，协程的本质是单线程，不能同时将单个cpu的多核用上
协程需要和进程配合才能运行在多cpu上，日常编写的绝大部分没有这个必要，除非是cpu密集型应用
进行阻塞操作（如IO）时会阻塞掉整个程序

Greenlet
能把阻塞去掉

Gevent
封装了Greenlet，是第三方库，可以轻松通过gevent实现并发同步或异步编程，在gevent中用到的主要模式是Grennlet，它是以C拓展模块的形式接入python的轻量级协程。Greenlet全部运行在主程序操作系统进程的内部，但他们被协作式地调度

通过gevent下实现单线程下的多socket并发
多线程实现socket并发，开销很大，效率很低
协程比多线程启动的连接多


如果报错是因为socket端的端口不能重复用，需要先在server端释放掉
而且即使释放掉os也需要自己释放了才能使用

  File "C:\Program Files\Python35\lib\threading.py", line 862, in run
    self._target(*self._args, **self._kwargs)
  File "D:/PycharmProjects/s12/20170623_day9/Client_socket.py", line 12, in run
    s.connect((HOST,PORT))
OSError: [WinError 10048] 通常每个套接字地址(协议/网络地址/端口)只允许使用一次。
 
需要释放已有的套接字连接
 
epoll比select效率高很多，因为不需要扫描全部，只需要扫描操作系统返回的网络连接
copy用户态内存到内核态需要耗费资源，epoll只需要内存映射即可(nmap)
nginx、外部框架tornado都是epoll






