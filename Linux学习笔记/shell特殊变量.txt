shell特殊变量
$0 获取当前脚本文件名
[root@test scripts]# sh 0.sh 
0.sh
[root@test scripts]# sh /server/scripts/0.sh  
/server/scripts/0.sh

$n 获取当前脚本的第n个参数，大于9用{}括起来${n}

[root@test scripts]# seq -s " $"  0 10 
0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10

[root@test scripts]# seq 9|sed 's#[0-9]#$&#g'
$1
$2
$3
$4
$5
$6
$7
$8
$9

[root@test scripts]# seq -s " $" 1 10|sed '/1/s/1/$1/'
$1 $2 $3 $4 $5 $6 $7 $8 $9 $10

 vim n.sh
echo $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10}

$1默认取第一个参数

[root@test scripts]# sh n.sh  a b c d e f g h i j k l m n
a b c d e f g h i j
[root@test scripts]# sh n.sh `seq -s " " 10`
1 2 3 4 5 6 7 8 9 10

$# 命令行参数的个数
[root@test scripts]# sh n.sh  a b c d e f g h i j k l m n
a b c d e f g h i j
14

[root@test scripts]# sh n.sh  "a b c d e f g h i j k l m n"
a b c d e f g h i j k l m n
1
双引号代表一个参数

dirname和basename 取路径
[root@test scripts]# cat 0.sh 
dirname $0
basename $0
[root@test scripts]# sh /server/scripts/0.sh 
/server/scripts
0.sh

$#参数个数


$*
$@

进程状态变量
$$获取当前shell的进程号
$!执行上一命令的pid
$_在此之前执行的脚本的最后一个参数
$? 可以用来判断上一个命令是否执行成功
  例如make之后 echo  $?
  $?返回值 0成功  2权限拒绝  1-125运行失败，脚本命令、系统命令错误或参数
传递错误  126找到命令无法执行  127位找到要执行的命令

[root@test scripts]# /etc/init.d/rpcbind
Usage: /etc/init.d/rpcbind {start|stop|status|restart|reload|force-reload|condrestart|try-restart}
You have new mail in /var/spool/mail/root
[root@test scripts]# echo $?
2
[root@test scripts]# su - zhangcai  
-bash-4.1$ ll /root/
ls: cannot open directory /root/: Permission denied
-bash-4.1$ echo $?
2
-bash

[root@test ~]# cat 2.sh 

echo $$ >> /root/a.log
while true
do
  uptime
  sleep 2
done

[root@test ~]# cat a.log 
2696

[root@test scripts]# ps -ef|grep 2.sh
root      2696  2556  0 19:34 pts/0    00:00:00 sh 2.sh



[root@test scripts]# cat 3.sh 
cd /etc
tar zcf service.tar.gz ./services
[ $? -eq 0 ] && echo ok

[root@test scripts]# sh 3.sh 
ok

错误
[root@test scripts]# cat 3.sh 
cd /etc
tar  service.tar.gz ./services  >&/dev/null
[ $? -eq 0 ] && echo ok

[root@test scripts]# sh 3.sh 
[root@test scripts]# echo $?
1



shell变量难点$* 和$@
$*会将所有的参数视为单个字符串等同于“$1$2$3”
$@ “$1“ ”$2“ ”$3”会保留内嵌在每个参数之间的空白

[root@test scripts]# set -- "I am" handsome oldboy.
You have new mail in /var/spool/mail/root
[root@test scripts]# echo $#
3
[root@test scripts]# for i in $*;do echo $i;done
I
am
handsome
oldboy.
[root@test scripts]# for i in "$*";do echo $i;done 所有参数当成一个字符串了
I am handsome oldboy.
[root@test scripts]# for i in $@;do echo $i;done
I
am
handsome
oldboy.
[root@test scripts]# for i in "$@";do echo $i;done
I am
handsome
oldboy.
[root@test scripts]# for i;do echo $i;done   不加"$@"默认就是$@
I am
handsome
oldboy.


echo eval exec export readonly read shift wait exit和.(点号)

echo 将变量名表指定的变量显示到标准输出
evalargs
读入参数args，并将它们组合成一个新的命令，然后执行
exec当shell执行exec语句时，不会创建新的子进程，而是转而去执行指定的命令，
当指定的命令执行完时，该进程（也就是最初的shell）也就终止了，所有shell程序中
exec后面的语句将不再执行
readonly只读变量，用readonly显示所有只读变量
read从标准输入读字符串，传给指定变量
可以在函数中用local变量名的方式声明局部变量
shift语句
shift语句按如下方式重新命令所有的位置参数变量，即$2变成$1,$3变成$2……
程序每使用一次shift语句，都使所有的位置参数一次向左移动一个位置，并使位置参数
$#减1，直到减到0为止

[root@test scripts]# set -- "I am" handsome oldboy.
You have new mail in /var/spool/mail/root
[root@test scripts]# echo $#
3
[root@test scripts]# echo $1
I am
[root@test scripts]# echo $2
handsome
[root@test scripts]# echo $3
oldboy.
[root@test scripts]# shift
[root@test scripts]# echo $1
handsome
[root@test scripts]# echo $2
oldboy.
[root@test scripts]# echo $3

[root@test scripts]# shift 
[root@test scripts]# echo $1
oldboy.
[root@test scripts]# echo $2

[root@test scripts]# echo $3

变量子串的常用操作
${#string}返回$string的长度
[root@test scripts]# OLDBOY="I am oldboy"
You have new mail in /var/spool/mail/root
[root@test scripts]# echo $OLDBOY
I am oldboy
[root@test scripts]# echo ${#OLDBOY}
11
[root@test scripts]# echo $OLDBOY|wc -m
12

${string:position} 从position开始提取子串

[root@test scripts]# echo ${OLDBOY:2}
am oldboy

第二个字符不包括在内

${string:position:length}从$position之后开始提取长度为$length的子串
[root@test scripts]# echo ${OLDBOY:2:2}
am
[root@test scripts]# echo ${OLDBOY}|cut -c 3-4
am

${string#substring} 从变量$string开头开始删除最短匹配$substring子串
[root@test scripts]# echo ${OLDBOY#I am}
oldboy

${string##substring} 从变量$string开头开始删除最长匹配$substring子串
[root@test scripts]# echo ${OLDBOY#I am old}
boy
[root@test scripts]# echo ${OLDBOY##I am old}
boy

${string%substring} 从变量$string结尾开始删除最短匹配$substring子串
[root@test scripts]# echo ${OLDBOY%oldboy}
I am

${string%%substring}  从变量$string结尾开始删除最长匹配$substring子串
${string/substring/replace}使用$replace代替第一个匹配的substring
[root@test scripts]# echo ${OLDBOY/I am/ you are}
you are oldboy

${string/#substring/replace}如果$string前缀匹配$substring，就用$replace来代替

${string/%substring/replace} 从结尾开始匹配



变量结尾删除实践
去掉finished字符串

for n in `seq 5`;do `cp a.log stu_${n}_finished.log`;done

-rw-r--r--  1 root root    30 May 18 19:46 stu_1_finished.log
-rw-r--r--  1 root root    30 May 18 19:46 stu_2_finished.log
-rw-r--r--  1 root root    30 May 18 19:46 stu_3_finished.log
-rw-r--r--  1 root root    30 May 18 19:46 stu_4_finished.log
-rw-r--r--  1 root root    30 May 18 19:46 stu_5_finished.log

test=stu_1_finished.log 

for f in `ls ./*.log`
do
mv $f `echo ${f%finished*}`.log
done

-rw-r--r--  1 root root    30 May 18 19:46 stu_1_.log
-rw-r--r--  1 root root    30 May 18 19:46 stu_2_.log
-rw-r--r--  1 root root    30 May 18 19:46 stu_3_.log
-rw-r--r--  1 root root    30 May 18 19:46 stu_4_.log
-rw-r--r--  1 root root    30 May 18 19:46 stu_5_.log

改结尾的拓展名

for f in `ls ./*.log`
do
mv $f `echo ${f/%log/LOG}`
done

for f in `ls ./*log*`
do
#mv $f `echo ${f/%log/LOG}`
 mv $f 	`echo $f|sed 's/log/LOG/g'`
done

 
ls |awk -F 'finished' '{print $1$2}'

ls |awk -F 'finished' '{print "mv "$0" "$1$2""}' |/bin/bash

 rename "finished"  "" *

rename $from $to $file

其他变量的替换
${value:-word}如果变量名存在且非null，则返回变量的值。否则，返回word字符串。
用途：如果变量未定义，则返回默认值。判断变量是否有定义。
eg：${value:-word} 如果value未定义，则表达式的值为word
[root@test scripts]# result=${oldgirl:-UNSET}
[root@test scripts]# echo $result
UNSET
[root@test scripts]# echo $oldgirl
[root@test scripts]# oldgirl=beautiful
[root@test scripts]# echo $result
UNSET
[root@test scripts]# echo $oldgirl
beautiful
[root@test scripts]# result=${oldgirl:-UNSET}
[root@test scripts]# echo $result
beautiful

${value:=word}如果变量名存在且非null，则返回变量的值。否则，设置这个变量值为word。
并返回其值
用途：如果变量未定义，则设置这个变量值为word。给空变量赋值。
并返回其值
eg：${value:=word} 如果value未定义，则设置value的值为word，并返回其值
[root@test scripts]# echo $test

[root@test scripts]# result=${test=UNSET}
[root@test scripts]# echo $result
UNSET
[root@test scripts]# echo $test  
UNSET

${value:? "not defined"}如果变量名存在且非null，则返回变量的值，否则显示变量名:message
并退出当前的命令或者脚本
用途：用于捕捉由于变量未定义而导致的错误，并退出程序
eg：${value:? "not defined"}如果value未定义，则显示-bash: value: not defined并退出


${value:+word}如果变量名存在且非null，则返回word。否则返回null。
用途：用于测试变量是否存在

${value-word}当变量不存在用word替代

/etc/init.d/httpd 
pidfile=${PIDFILE-/var/run/httpd/httpd.pid}

path1="/tmp"
rm -fr $path1
如果path1不存在，那么可能从根/开始删起
rm -fr ${path1-/tmp}  #可以避免


生产场景
/etc/init.d/httpd 
/etc/init.d/crond 
rm -fr 

find删除未定义变量可能导致灾难性的后果

[root@test scripts]# cat d.sh 
#path=/seer/backup
find ${path:=/tmp} -name '*.tar.gz' -type f|xargs rm -f

[root@test scripts]# sh -x d.sh 
+ xargs rm -f
+ find /tmp -name '*.tar.gz' -type f


