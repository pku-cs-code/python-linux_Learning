ascii

c编译
二进制，代码处理快
代码多

c#，java，python

市场供需决定python开发工资高

php类库
java企业级应用

python可能慢，因为历史的原因
全局解释器组，相对于其他语言要慢
linux装完自带python
python在自动化、大数据处理、系统组件比较多
离c非常近
直接调用c的方法
类库比较齐全
8TB起大数据处理非常好，潘达斯（pandas？）类库

python的种类
cpython，python的官方版本，用c语言实现
cpython实现会将源文件（py文件）转换成字节码文件pyc文件，然后运行在python虚拟机上
jpython：java的python实现
ironpython：c#的python实现
pypy：早晚会火，因为它快。有自己的解释器，可以编译过程中生产机器码直接供cpu执行
引用微线程

同一行代码，比如print（“helloworld”）
在不同的python种类中会用不同的解释器
cpython是c解释器，解释成.pyc字节码
jpython用java的解释器去解释，解释成java识别的字节码，最后转成机器码运行在cpu上
ironpython用c#解释器解释，解释成c#字节码，最后转成机器码
pypy 用自己的解释器解释，出现字节码，然后把字节码编译成机器码，编译时已经生产机器码了


cpyton比其他两种快

执行后会生成.pyc字节码文件

python hello.py
./hello.py
py文件首行加解释器


python2里面编码问题很头疼
#!/usr/bin/env python
#-*-coding:utf-8 -*-

起初设想8个位置用来保存所有的内容

万国码（unicode）
包含所有的字符
至少16位
python3默认是按unicode解释的
可能浪费空间
utf-8对unicode的优化
ASCII码，字母和数字用8位存
其他可能的按unicode来存
欧洲的2个字节存，16位
汉字3个字节存，24位
GBK等是unicode往下的优化

GBK和utf-8是同一个等级
python2转换编码
GBK和utf-8转换，先转成unicode然后再互相转换
unicode转成utf-8是编码，encode
utf-8转成unicode是解码，decode





