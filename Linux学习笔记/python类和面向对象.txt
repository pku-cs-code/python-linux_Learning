python类和面向对象

面向过程
面向对象的三个特性：封装、继承、多态
 类
 子类
 父类
 多态
 实例
实例变量、成员变量self.name
实例本身
 把一个抽象的类变成一个具体的对象的过程叫做实例化

类变量、类属性
初始化
封装
继承

函数在类中叫方法,叫类的方法

类不能访问实例变量

把类方法变成静态方法，不能访问实例变量和类变量，和实例不能有关系了。
一般情况不用。可以作为类的一个工具箱
@property	可以访问实例变量和类变量，不能穿参数

私有属性self.__num
	其他语言是private static声明

经典类和新式类
  新式类加了若干方法
  底层实现不一样，多继承

广度优先
#!/usr/bin/env python
# -*- coding: utf-8 -*-

class A:
     n = 'A'
     def f2(self):
        print("f2 from A")
class B(A):
    n = 'B'
    def f1(self):
        print("from B")
    def f2(self):
        print("f2 from B")
class C(A):
    n = 'C'
    def f2(self):
        print("from C")
class D(B,C):
    pass

d = D()
d.f1()
d.f2()

d.f2先执行B的f2，然后B找不到就找C，C找不到找A
同一级别的找，找不到再往上走
广度优先跟深度优先不一样，如果按深度优先B没有就会去调用A的f2，这是不合理的
因为B和C处于同一级别，和d的关系更紧密

经典类是深度优先，新式类是广度优先

python3之后不管是经典类和新式类，都按新式类来实现


类的特殊成员
__doc__方法，类的介绍
__module__方法 模块所在文件的名字
__init__
__del__析构方法，实例在销毁的时候回自动执行这个方法，程序执行完统一销毁
	里面起什么作用自己规定，程序关闭时应用，一般不用。可以手动关闭
__call__比较底层，构造的执行是由创建对象触发的
__new__重新构造类，启动__init__的函数。重写了__new__之后，类本身改变了
__dict__以字典的形式显示类的变量，查看一个类有多少变量。不显示实例变量，只显示类变量
__getitem__
__setitem__
__delitme__
__getslice__
__setslice__
__delslice__
__iter__
__metaclass__最底层创建类的，一般涉及不到


type创造了类



@staticmethod或@classmethod
http://blog.csdn.net/handsomekang/article/details/9615239

https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/14/README.html
http://www.wklken.me/posts/2013/12/22/difference-between-staticmethod-and-classmethod-in-python.html

@staticmethod像是一个类的函数，调用类不用实例化便可以使用这个函数，可以不传参数
实例和类方法都可以调用

@classmethod是类的一个方法，需要传递cls函数给这个方法，当类实例化后第一个参数默认为这个类的实例变量，其他变量依次传递给这个类方法的参数

https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/14/README.html


class A(object):
    def foo(self,x):
        print "executing foo(%s,%s)"%(self,x)

    @classmethod
    def class_foo(cls,x):
        print "executing class_foo(%s,%s)"%(cls,x)

    @staticmethod
    def static_foo(x):
        print "executing static_foo(%s)"%x
    @staticmethod
    def static_foo2():
        print "'test static_foo2"

a=A()
#class_foo(A,'test')
a.class_foo('class_foo test')
a.static_foo('stattic_method_test_without_class')
A.static_foo('test_static_method')
a.static_foo('test')
a.static_foo2()
A.static_foo2()

property属性
http://python.jobbole.com/80955/


class Person(object):
    """"""

    # ----------------------------------------------------------------------
    def __init__(self, first_name, last_name):
        """Constructor"""
        self.first_name = first_name
        self.last_name = last_name

    # ----------------------------------------------------------------------
    @property
    def full_name(self):
        """
        Return the full name
        """
       # return "%s %s" % (self.first_name, self.last_name)

        print "%s %s" % (self.first_name, self.last_name)


person = Person('zhagn','cai')
person.full_name
person.first_name = 'zzz'
person.full_name

属性后面参数不用谢类而可以调用类的方法
类方法classmethod是可以供实例和类使用的，但是cls参数对于实例和类都是抽象的类
staticmethod是可以访问不可以访问类和实例的变量和方法，也就是不能访问self.name等
而classmethod和property是可以访问的


可以通过直接调用而不用写括号调用方法

python中的下划线

http://lib.csdn.net/article/python/1685
_user前面带有一个下划线是私有的函数或者属性

1.  前带_的变量:  标明是一个私有变量, 只用于标明, 外部类还是可以访问到这个变量

两个下划线表示私有变量和方法，是为了避免和子类的方法冲突，实际上子类也是可以访问的

https://foofish.net/python.html

  print Foo.__boo
  
  AttributeError: type object 'Foo' has no attribute '__boo'
  
  要换成这样
      print Foo._Foo__boo

https://michaelyou.github.io/2015/05/05/Python-%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/

这种用法表示Python中特殊的方法名。其实，这只是一种惯例，对Python系统来说，这将确保不会与用户自定义的名称冲突。通常，你将会覆写这些方法，并在里面实现你所需要的功能，以便Python调用它们。例如，当定义一个类时，你经常会覆写“__init__”方法。

range和xrange
http://www.cnblogs.com/zhangjing0502/archive/2012/05/16/2503880.html


前者会生成一个列表，熟悉与list类型
而xrange是迭代器类型，在调用时才会去到内存中运行，相比range更节省资源，运算更快

a = range(100)

print('type of a=range(100):',type(a))
print("value of a=range(100)",a)
print ("value of a[0]:%s,a[1]:%s") %(a[0],a[1])

a = xrange(100)

print('type of a=range(100):',type(a))
print("value of a=range(100)",a)
print ("value of a[0]:%s,a[1]:%s") %(a[0],a[1])




	  