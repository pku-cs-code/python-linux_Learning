python之进程与线程

cpu能调用的最小单位是线程
一个任务可以跑一个线程

cpu好坏标准
主频
缓存

进程负责存储一些数据的
进程有点像容器
进程至少包含一个线程
线程是负责跟cpu交互

cpu不需要知道进程的全部信息，只需要知道上下文
开启一个进程比开启一个线程慢得多
但是不能比较进程和线程的快慢
进程跟cpu通信最终是靠线程
没有一个线程是单独存在的

一条线程指的是进程中单一顺序的控制流，一个进程可以并发多个线程
每条线程执行不同的任务


线程是上下文执行指令execution context，提供给cpu

线程共享数据
有直接访问进程中所有的数据

线程之间可以直接交换数据，但进程之间需要通过sibling process来通信

进程即使fork一份，两个进程之间也不可以直接访问数据
fork的好处，保证数据安全
坏处浪费内存

线程可以控制同一进程的其他线程
但是进程只能控制它的子进程

对主线程的修改可能影响其他的线程


Python GIL(Global Interpreter Lock)
无论你起多少个线程，有多少个cpu，python在运行的时候会只允许一个线程运行

python使用的是原生的操作系统的线程


线程锁（互斥锁Mutex）
一个进程下可以起多个线程，多个线程共享父进程的内存空间，也就意味着每个线程可以访问同一个数据

全局解释器确保只有一个线程能运行
定时器不停地在多个线程中切换，确保多线程运行，是解释器级别的
GIL能控制的是解释器

cpython内部管理是非线程安全的（不能保证数据安全）
如果同时启动10个线程，因为线程之间是共享数据的，又因为cpython是非线程安全的，所以在将数据传给c时，python是控制不了c的接口的，故可能会出现数据错乱，防止c的原生线程冲掉数据
python是调用的c原生线程，线程要干什么python就管不了，交由os去处理，可能把数据改乱了

加锁后多线程变成单线程
每核同时只能运行一个线程

python35不加锁貌似可以，python2是不行的

GIL是锁上面python和cpu交互，acquire是锁cpu和os之间


递归锁Rlock


信号量
互斥锁同时允许一个线程更改数据，而Semaphore同时允许多个线程更改数据。
类似线程池，一次可以运行几个线程

线程间同步和通信


多线程mutliprocessing

别人说Python慢是因为是假线程，其实是因为python解释器慢，需要解释后编译

多线程比串行快，涉及到io、sleep操作就切换，涉及到io操作就 快
比串行快
io密集型的用都线程
socket server是io密集型的，交给os多线程很快
再快也没有多线程快

通过多进程绕过GIL
python的多进程也是用的原生进程，调用os直接多进程
绕过GIL直接多线程

用子进程来代替多线程
充分利用多核机器，win和linux下都可以

如8核，开8个进程，每个进程再开线程

ImportError: cannot import name 'Process'
原因是文件名multiprocessing，IDE会优先导入这个文件里的Process
又因为这文件里没有Process，故会报错，把文件名修改一下就可以了


进程间通信
不同进程间内存是不共享的，要想实现两个进程间数据交换，可以采用以下方法

Queues队列
跟threading里的queue差不多

Python 2.6.6 (r266:84292, Aug 18 2016, 15:13:37) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-17)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import Queue
>>> import tab
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named tab
>>> a.put(123)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'a' is not defined
>>> a=Queue.Queue()
>>> a.put(123)
>>> a.put(321)
>>> a.get()
123
>>> a.qsize()
1

以上是在一个python进程里，别的进程不能访问Queue，不能保证安全


多进程中可以用Queue，是从multiprocessing导入Queue
封装了一下，子进程和父进程都能访问这个Queue

Pipes
返回一对对象


Manager
进程间的数据传递
实现内存共享
支持list,dict,Namespace,Lock,Rlock,Semaphore,BoundedSemaphore
Condition,Event,Barrier

进程同步

python3解决了，python2没有

进程池
启动一个线程不耗时间，但是启动一个进程需要耗费很多资源和时间
进程池内部维护一个进程序列，当使用时，则去进程池中获取一个进程，如果进程池序列中没有可用进程，那么程序会等待
没有线程池是因为启动多线程不会产生问题

paramiko模块

多线程协作
event = threading.Event()

event.set()
event.wait()等待标记被设定
event.clear()
event.isSet()

Manager是线程安全的

























































































































 























































































