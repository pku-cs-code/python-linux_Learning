python深浅拷贝、函数
递归
装饰器
collections系列

跟python解释器有关的模块都封装在sys模块中了
字符串本质是字符数组

python中一切皆对象
set集合（和hash表类似）
set里不允许重复的元素出现
内部是以key:value的形式保存的
爬虫有用
集合比访问列表、数组要快得多
访问速度快，天生解决了重复问题
set是一种字典
add
clear
copy 浅拷贝
difference	找到不同的并创建到新的中去，原来的集合不变
		s2 = set(['alex','eric','tony','alex'])
		print(s2)
		s3 = s2.difference(['alex','eric'])
		print(s2)
		print(s3)
difference_update 找到不同的并创建，原来的被覆盖，不能被赋值给新的变量
		s2 = set(['alex','eric','tony','alex'])
		print(s2)
		# s3 = s2.difference(['alex','eric'])
		# print(s2)
		# print(s3)
		s4 = s2.difference_update(['alex','eric'])
		print(s2)
		print(s4)

discard	移除元素
intersectiion	取交集，修改原来的set
isdisjoint	如果没有交集，返回true
issubset	是否是子集
issuperset	是否是父集
pop		remove的同时获取这个值，可以将pop出的值赋值给别的变量
remove	指定移除，没有返回值
symmetric_difference差集（互相减，两个循环），创建新对象
symmetric_difference_update差集，改变原来的
union		并集
update	更新

collection系列
字典是无序的
列表的值类型没有指定
对基本的数据类型的加工

Counter	对字典类型的补充，谁出现了多少次
	Counter(dict)继承父类的所有功能
	import collections
	obj = collections.Counter('ssfdffjkjk')
	print(obj)
most_common 拿到前几位
	import collections
	obj = collections.Counter('ssfdffjkjk')
	print(obj)
	ret = obj.most_common(4)
	print(ret)
elements	计数器中的所有元素拿到，原生的值
fromkeys	还没有实现，使用会报错
substract
update	


有序字典orderedDict
import collections
dic =collections.OrderedDict()
#dic = dict()
dic['k1'] = 'v1'
dic['k2'] = 'v2'
dic['k3'] = 'v3'
print(dic)

clear
copy
fromkeys
items
keys
move_to_end 第一个到最后
pop	后进先出（内存里的栈就是后进先出），还可以拿到
popitems
setdefault
update	
	dic.update({'k1':'v111','k10':'v10'})
	print(dic)
values

字典默认输出keys
